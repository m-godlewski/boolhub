services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.9.3
    restart: always
    ports:
      - 9000:8000
      - 9443:9443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/portainer_data:/data
    networks:
      - boolnet
  influxdb:
    container_name: influxdb
    image: influxdb:2.2.0
    restart: always
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: boolhub
      DOCKER_INFLUXDB_INIT_BUCKET: boolhub
    volumes:
      - /data/influxdb:/var/lib/influxdb2
      - ${BOOLHUB_BACKUPS_PATH}:${BOOLHUB_BACKUPS_PATH}
    networks:
      - boolnet
  grafana:
    container_name: grafana
    image: grafana/grafana:10.1.0-ubuntu
    restart: always
    ports:
      - 3000:3000
    volumes:
      - /data/grafana:/var/lib/grafana
    user: "472"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_PLUGINS_ENABLE_ALPHA=true
    networks:
      - boolnet
  postgresql:
    container_name: postgresql
    image: postgres:15.3
    restart: always
    ports:
      - 5432:5432
    volumes:
      - /data/postgres/:/var/lib/postgresql/data/
      - ./docker/postgresql/init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRE_PASSWORD}
      - POSTGRES_USER=${POSTGRE_USER}
    networks:
      - boolnet
  central:
    container_name: central
    build: ${BOOLHUB_CENTRAL_PATH}
    restart: always
    ports:
      - 80:8000
    volumes:
      - /data/central/:/usr/src/app/
    env_file:
      - .env
    depends_on:
      - postgresql
    command: >
      /bin/bash -c "python manage.py shell < createsuperuser.py && python manage.py makemigrations --noinput && python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    environment:
      - CENTRAL_USER=${CENTRAL_USER}
      - CENTRAL_PASSWORD=${CENTRAL_PASSWORD}
    networks:
      - boolnet
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter
    restart: always
    ports:
      - 9100:9100
    networks:
      - boolnet
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - node_exporter
    networks:
      - boolnet
  redis:
    container_name: redis
    image: redis/redis-stack-server
    restart: always
    ports:
      - 6379:6379
    volumes:
      - /data/redis/:/data
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASSWORD} --save 60 1"
    networks:
      - boolnet
  brainstone:
    container_name: brainstone
    build:
      context: ./
      dockerfile: ${BOOLHUB_BRAINSTONE_PATH}/Dockerfile
    restart: always
    network_mode: host
    privileged: true
networks:
  boolnet:
    driver: bridge
